// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  phone      String?     @unique
  email      String?     @unique
  name       String
  avatar     String?
  createdAt  DateTime    @default(now())
  updateedAt DateTime    @updatedAt
  tokens     Token[]
  products   Product[]
  fav        Fav[]
  posts      Post[]
  answers    Answer[]
  wonderings Wondering[]
}

model Token {
  id         Int      @id @default(autoincrement())
  payload    String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  createdAt  DateTime @default(now())
  updateedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updateedAt  DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String   @db.MediumText
  fav         Fav[]

  @@index([userId])
}

model Fav {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updateedAt DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId     Int
  productId  Int

  @@index([userId])
  @@index([productId])
}

model Post {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updateedAt DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   String      @db.MediumText
  answers    Answer[]
  wondering  Wondering[]

  @@index([userId])
}

model Answer {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updateedAt DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  answer     String   @db.MediumText

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updateedAt DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int

  @@index([userId])
  @@index([postId])
}
